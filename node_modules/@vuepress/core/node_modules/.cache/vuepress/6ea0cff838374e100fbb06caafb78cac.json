{"remainingRequest":"C:\\Users\\Batman\\Documents\\strony www\\edushell-github\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\Batman\\Documents\\strony www\\edushell-github\\physics\\node_modules\\@vuepress\\theme-default\\util\\index.js","dependencies":[{"path":"C:\\Users\\Batman\\Documents\\strony www\\edushell-github\\physics\\node_modules\\@vuepress\\theme-default\\util\\index.js","mtime":1582390677832},{"path":"C:\\Users\\Batman\\Documents\\strony www\\edushell-github\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1578426381466},{"path":"C:\\Users\\Batman\\Documents\\strony www\\edushell-github\\node_modules\\babel-loader\\lib\\index.js","mtime":1582390667954}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}